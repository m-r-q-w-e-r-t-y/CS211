

#include <iostream>

#include <cmath>

using namespace std;



// Returns true if the queen in column c is ok

bool ok(int q[], int col) 

{

   for(int i = 0; i < col; i++)

   {

     if(q[col] == q[i] || col-i == abs(q[col] - q[i]))

     {

       return false;

     }

   } 

   return true;

}



void print(int q[]) 

{

   static int numSolutions = 0;

   cout << "Solution #" << ++numSolutions << ": ";

   for(int i = 0; i < 8; i++)

   {

     cout << q[i];

   }

   cout << endl;

    

   //2D array from 1D to make printing easier 

   int twoDRep[8][8] = {};

   for (int i = 0; i < 8; i++)

   {

     twoDRep[q[i]][i] = 1;

   }

   //print the 2D array

   for (int i = 0; i < 8; i++)

   {

     for(int j = 0; j < 8; j++)

     {

       cout << twoDRep[i][j] << " ";

     }

     cout << endl;

   }

   cout << endl << endl;

}



// in 1D version, index is the column number, 

// value (q[index]) is the row number where a queen is placed

int main() {

   // int c to 0 <- index and column number

   int col = 0;

   // Initialize the array to 0.

   int q[8] = {};

  // Start in the 1st row, 1st column

   q[0] = 0;

   // End the loop if you backtrack from the first column

   while (col >= 0) 

   { 

      // Move to the next column

      col++;

      // If you have passed the last column,

      if(col > 7)

      {

         // Call the print function and backtrack

         print(q);

      }

      // Otherwise, move to one before the first row

      else

      {

        q[col] = -1;

      }

      //NR

      while (col >= 0) 

      {

        // Move to the next row

        q[col]++; // q[c] = q[c] +1;

        // If you have passed the end of the column, backtrack

        if(q[col] > 7)

        {

          col--;

        }

        // Otherwise, call the ok function.  If it returns true, go back to the beginning of the outer loop.

        else if (ok(q, col))

        {

          break;

        }

      }

   }

   return 0;

}

